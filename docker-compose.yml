# Development Docker Compose configuration
version: '3.8'

services:
  # Frontend development server
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend.dev
    ports:
      - "3000:3000"
    volumes:
      - ./web-frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - expense-tracker-network

  # Backend development server
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend.dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/app/data
      - ./uploads:/app/uploads
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_PATH=/app/data/expense_tracker.db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AI_ENABLED=true
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGIN=http://localhost:3000
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
      - AI_CACHE_TTL=24
    networks:
      - expense-tracker-network
    healthcheck:
      test: ["CMD", "node", "src/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database backup service
  db-backup:
    image: alpine:3.18
    volumes:
      - ./data:/data
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          echo 'Creating database backup...'
          cp /data/expense_tracker.db /backups/expense_tracker_$$(date +%Y%m%d_%H%M%S).db
          find /backups -name '*.db' -mtime +7 -delete
          sleep 86400
        done
      "
    networks:
      - expense-tracker-network

networks:
  expense-tracker-network:
    driver: bridge

volumes:
  data:
  uploads:
  backups:
